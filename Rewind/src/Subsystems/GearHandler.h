// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef GEARHANDLER_H
#define GEARHANDLER_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class GearHandler: public Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<Relay> gearEjectSpike;
	std::shared_ptr<Relay> gearRotSpike;
	std::shared_ptr<DigitalInput> gearEjectFwdLmtSw;
	std::shared_ptr<DigitalInput> gearEjectRearLmtSw;
	std::shared_ptr<AnalogPotentiometer> gearTransPot;
	std::shared_ptr<DigitalInput> gearTransLeftLmtSw;
	std::shared_ptr<DigitalInput> gearRotateSnsr;
	std::shared_ptr<DigitalInput> gearTransRightLmtSw;
	std::shared_ptr<DigitalInput> gearLoadedSnsr;
	std::shared_ptr<SpeedController> gearTransSpdCtrl;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// ----------- Constants --------

	const double k_PotConv = .01	;					// Volt change per inch of travel
	const double k_PotScale = 1;
	const double k_PotOffset = 0;

	// ---------- Internal Private Variables --------------------------------

	// -------------------- Network Table Pointer -------------------
	std::shared_ptr<NetworkTable> netTable;
	std::vector<std::string> keys;


public:
	GearHandler();
	void InitDefaultCommand();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// ---------- Public Variables --------------------------------
	const double k_PotLeftVolt = 0.7725;					// Convert pot value to distance
	const double k_PotRightVolt = 0.9465;				// Convert pot value to distance
	// const double k_PotCtrVolt = 0.862;					// Convert pot value to distance
	const double k_PotCtrVolt = (((k_PotRightVolt - k_PotLeftVolt) / 2 ) + k_PotLeftVolt);
	const double k_GearTransWidth = 6.0;				// distance translator can move
	const bool PRESSED = true;
	const bool NOTPRESSED = false;
	const bool GEARINHOPPER = false;					// returns false when sensor is blocked by gear
	const bool GEARALIGNED = false;						// returns false when sensor DOES see the bar
	double potCurrVoltage, potCurrPosition;
	int currTransLeftlmtSw, currTransRightLmtSw;
	int currGearInHopperSnsr, currGearAlignedSnsr;
	int currEjectFwdLmtSw, currEjectRearLmtSw;

	// ---------- Public Methods --------------------------------

	// --------------- Motor Control -----------------
	void TransMtrDrive(double speed);							// manually drive gear left or right
	void TransMtrOff();
	void RotateMtrOn();
	void RotateMtrOff();
	void EjectMotorFwd();
	void EjectMotorBack();
	void EjectMotorStop();

	// ---------------- Limit Switch Methods ---------------
	bool GetTransLeftLmtSw();
	bool GetTransRightLmtSw();
	bool GetEjectFwdLmtSw();
	bool GetEjectRearLmtSw();
	bool GetGearInHopperSnsr();
	bool GetGearAlignedSnsr();

	// -------- Pot Methods ---------------
	//void SetPotDefaults(float kPotOffset, float kPotScale);
	float GetTransPosition();
	float GetTransPotValue();


	// ------------------- Misc Methods ------------------------
	void PutGearAutoAlignFlag(bool flag);
	bool GetAutoAlignFlag();
	void DisplaySmartdashValues();
	void DisplaySmartdashSimple();
	double Round(double value, int digits);

};

#endif
