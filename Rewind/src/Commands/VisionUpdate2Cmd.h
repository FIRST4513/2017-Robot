// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef VISIONUPDATE2CMD_H
#define VISIONUPDATE2CMD_H


#include "Commands/Subsystem.h"
#include "../Robot.h"
#include "../Point.h"

//Point startPt;
double distx, disty;

/**
 *
 *
 * @author ExampleAuthor
 */
class VisionUpdate2Cmd: public Command {
public:

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	VisionUpdate2Cmd();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	virtual void Initialize();
	virtual void Execute();
	virtual bool IsFinished();
	virtual void End();
	virtual void Interrupted();


private:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLES

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLES

	std::string line;
	std::shared_ptr<NetworkTable> netTable;			// NetTables to talk to RoboRealm
	std::vector<std::string> keys;

	// ---------- Constants ---------------
	const double DEGPERPIXLE = 0.17209633;       	//0.1568046;
	const double IMAGECTRX = 94;
	const double IMAGECTRY = 0;
	const float DEGREETORADIANCONST = 0.0174533;	// Degrees * Constant = Radians
	const float RADIANSTODEGREECONST = 57.295791;	// Constant / Radians = Degrees
	const double pixleConvFactor = 0.17209633;		// 0.17798;
	const double RADIUSROBOTMIDPT = 14;				// Wheel base ctr to ctr 28"
	const float TgtHt = 9.75;						// Target ht above robot hinge 3" off ground
	const double tgtDistFromWall = 6;
	const double tmtr = 22;
	const double robotFrontToCtr = 14.25;

	// ---------- Data elements ------------
	double COGX,COGY, lastCOGX, lastCOGY, currHdg, currYaw;
	double htAngle, tgtDist, angleX, angleF, distToWall, tgtShiftDist, adjAngleX, width, adjWidth;
	double tgtDistance, tgtAngleX, tgtAngleY, sidee, angleToTip, newHdg;
	double tgtAlignError, hdgAngleOffset;
	double tgtTransCorrection;						// this is the distance in inches tgt is off ctr
	double tipHdg, tipDist, tipAngle;
	int validTgtFlag, retCode;

	//double ctrLineHdg, ctrLineDist;

	double B, C, D, E, G, H;

	Route route;
	Segment seg;
	Rbt rbt;

	int signArray[16][5] =  {{+1,+1,+1,+1,+1}, {+1,+1,+1,+1,+1}, {-1,+1,-1,-1,+1}, {+1,+1,+1,+1,+1}, {+1,-1,+1,+1,-1},
							 {-1,+1,-1,-1,+1}, {+1,+1,+1,+1,+1}, {+1,-1,+1,+1,+1}, {+1,+1,+1,+1,+1}, {+1,+1,+1,+1,+1},
							 {+1,+1,+1,+1,+1}, {-1,+1,-1,-1,+1}, {+1,-1,+1,+1,+1}, {+1,-1,+1,+1,-1}, {-1,+1,-1,-1,-1},
							 {+1,-1,+1,+1,-1}};

	int signArray2[10][4] = {{0,+1,+1,+1},{1,-1,-1,+1},{2,+1,+1,-1},{3,-1,-1,+1},{4,+1,+1,+1},
	              	  	  	  {5,+1,+1,-1},{6,-1,-1,-1},{7,+1,+1,+1},{8,-1,-1,+1},{9,+1,+1,-1}};


	// ------- Methods -----------
	void GetVisionData();
	void PutVisionData();
	void LogVisionData();

	void CalcTgtHdgDist();
	void CalcRobotPosition();
	int CalcSingleCurveSoloution();
	int CalcDblCurveSolution();
	double CalcDblCircle();
	double CalcArcLen(double angle, Point ctrPt, Point startPt, Point endPt, double dir);
	void PostRoute();

	int angleQuad();
	double calcRadiusOfTurn(double dist, double angle);
	double  dblCircleCalc();
	// ------------- Conversion Utility Routines ----------------------
	float ConvertImageAngleToPixelCnt(float angle, float ctr);
	float ConvertImagePosToAngle(float pos, float ctr);
};

#endif
