// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "GearTranToPosCmd.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

GearTranToPosCmd::GearTranToPosCmd(double Speed, double Position, int Mode): Command() {
    m_Speed = Speed;
    m_Position = Position;
    m_Mode = Mode;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void GearTranToPosCmd::Initialize() {
	SetTimeout(4);

	doneFlag = 0;
	// Mode 0 = Ctr
	//      1 = Get Tgt Data from Vision
	//		2 = Get from Position parameter

	if (m_Mode == 0) {							// Go to Center Position
		tgtPos = 0;
	}

	if (m_Mode == 1) {							// get target data from vision system
		if (Robot::vision->GetValidTgtFlag() == true)
			tgtPos = Robot::vision->GetTgtTransCorrection();
		else{
			tgtPos = 0;
			doneFlag = 1;
		}
	}

	if (m_Mode == 2) {						// get Target position from passed parameter
		tgtPos = m_Position;
	}

	currPos = Robot::gearHandler->GetTransPosition();
	if (currPos > tgtPos )
		dir = -1;								// we need to go Left
	else
		dir = +1;								// we need to go Right

	line = "Debug, GearHandler, Starting GearTranToPosCmd,  Mode=" + std::to_string(m_Mode);
	line += " Dest Pos=" + std::to_string(m_Position) +  " Speed=" + std::to_string(m_Speed);
	line += " Curr Pos=" + std::to_string(currPos) + " Dir=" + std::to_string(dir);
	Robot::logger->appendLog(line);
}

// Called repeatedly when this Command is scheduled to run
void GearTranToPosCmd::Execute() {
	Robot::logger->logGearHandler();
	currPos = Robot::gearHandler->GetTransPosition();
	if (doneFlag == 1) return;					// we have no valid vision target so exit

	if (dir == -1){								// were going Left
		if ((currPos <= tgtPos) || (Robot::gearHandler->GetTransLeftLmtSw() == true)){	// we have reached our target
			doneFlag = 1;}
		else{
			Robot::gearHandler->TransMtrDrive(-0.4);
		}
	}

	if (dir == +1) {								// were going Right
		if ((currPos >= tgtPos) || (Robot::gearHandler->GetTransRightLmtSw() == true)){// we have reached our target
			doneFlag = 1;}
		else {
			Robot::gearHandler->TransMtrDrive(0.4);
		}
	}
}

// Make this return true when this Command no longer needs to run execute()
bool GearTranToPosCmd::IsFinished() {
	if (IsTimedOut()) return true;
	if (doneFlag == 1) return true;
	return false;
}

// Called once after isFinished returns true
void GearTranToPosCmd::End() {
	Robot::gearHandler->TransMtrOff();
	Robot::logger->appendLog("Debug,GearHandler,Ending GearTranToPosCmd");
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void GearTranToPosCmd::Interrupted() {
	End();
}
