// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveUntlCloseCmd.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DriveUntlCloseCmd::DriveUntlCloseCmd(double Speed, double Dist, double Mode, double TO): Command() {
    m_Speed = Speed;
    m_Dist = Dist;
    m_Mode = Mode;
    m_TO = TO;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DriveUntlCloseCmd::Initialize() {
	SetTimeout(m_TO);

	line = "Debug, Drivetrain, Starting DriveUntilCloseCmd";
	line += " Distance=" + std::to_string(m_Dist) +  " Speed=" + std::to_string(m_Speed);
	line += " TimeOut=," + std::to_string(m_TO) + " Mode= " + std::to_string(m_Mode);
	Robot::logger->appendLog(line);

	Robot::drivetrain->ResetEncoders();
	//Mode 0 is going to be Ultrasound and 1 is going to be IR Prox.
	state = 0;
}

// Called repeatedly when this Command is scheduled to run
void DriveUntlCloseCmd::Execute() {
	if (m_Mode == 0){
		currDist = Robot::drivetrain->GetSonarDistance();
		}
	else{
		currDist = ((Robot::drivetrain->GetLeftProxDistance())+(Robot::drivetrain->GetRightProxDistance()))/2;
		}

	if (currDist > m_Dist){
		Robot::drivetrain->TankDrive(m_Speed, m_Speed);
		}
	else{
		state = 1;
		Robot::drivetrain->StopMtrs();
		}
}

// Make this return true when this Command no longer needs to run execute()
bool DriveUntlCloseCmd::IsFinished() {
	if (IsTimedOut()) return true;
	if (state == 1) return true;
	return false;
}

// Called once after isFinished returns true
void DriveUntlCloseCmd::End() {
	Robot::drivetrain->StopMtrs();
	Robot::logger->appendLog("Debug,Drivetrain,Ending DriveUntilCloseCmd");
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveUntlCloseCmd::Interrupted() {
	End();
}
