// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "GearDefaultCmd.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

GearDefaultCmd::GearDefaultCmd(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::gearHandler.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void GearDefaultCmd::Initialize() {
	Robot::logger->appendLog("Debug, Starting GearDefaultCmd");
	joy = Robot::oi->getPayloadController();
	std::cout << "Start GearDefaultCmd Init" << std::endl;
	ctrFlag = 0;			// has center button been pressed
}

// Called repeatedly when this Command is scheduled to run
void GearDefaultCmd::Execute() {
	Robot::gearHandler->TransMtrOff();		// stop motor untill command to move
	if ( joy->GetPOV(0) == 90 ){
		// Right D-Pad has been pressed translate right
		if (Robot::gearHandler->GetTransRightLmtSw() != true){
				ctrFlag = 0;		// clear any current motion toward center
				Robot::gearHandler->TransMtrDrive(0.55);	// stat motor moving right
		}

	}

	if ( joy->GetPOV(0) == 270 ){
		ctrFlag = 0;		// clear any current motion toward center
		// Left D-Pad has been pressed translate left
		if (Robot::gearHandler->GetTransLeftLmtSw() != true){
				Robot::gearHandler->TransMtrDrive(-0.55);	// stat motor moving right
		}
	}



	if ( joy->GetPOV(0) == 180 ){
		// Lower Center D-Pad button has been pressed Center the gear
		if (ctrFlag == 0) {
			// this is a new button press
			currPotVoltage = Robot::gearHandler->GetTransPotValue();
			if (currPotVoltage < Robot::gearHandler->k_PotCtrVolt) {
				// we are left of center and need to move right
				ctrFlag = -1; }
			else if (currPotVoltage > Robot::gearHandler->k_PotCtrVolt){
				// we are right of center and need to move left
				ctrFlag = 1; }
			else{
				ctrFlag = 0; }  // we are at center already
		}
	}


	if ( ctrFlag == 1) {			// we have been requested to move left
		currPotVoltage = Robot::gearHandler->GetTransPotValue();
		if (currPotVoltage > (Robot::gearHandler->k_PotCtrVolt))
			{
			// keep moving left
			Robot::gearHandler->TransMtrDrive(-0.40);
			}
		else
			{ // we have reached center so lets stop and clear the flag
			ctrFlag = 0;
			Robot::gearHandler->TransMtrOff();
			}
	}

	if ( ctrFlag == -1) {			// we have been requested to move right
		currPotVoltage = Robot::gearHandler->GetTransPotValue();
		if (currPotVoltage < (Robot::gearHandler->k_PotCtrVolt)) {
			// keep moving right
			Robot::gearHandler->TransMtrDrive(0.40); }
		else {						// we have reached center so lets stop and clear the flag
			ctrFlag = 0;
			Robot::gearHandler->TransMtrOff();	}
	}

	if (Robot::gearHandler->GetEjectRearLmtSw() != true){
		//we haven't hit the back yet so keep moving forward
		Robot::gearHandler->EjectMotorBack();
	}
	else{
		// we have hit the end we need to stop moving back
		Robot::gearHandler->EjectMotorStop();
		//ejectFlag =1;
	}

}

// Make this return true when this Command no longer needs to run execute()
bool GearDefaultCmd::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void GearDefaultCmd::End() {
	Robot::gearHandler->TransMtrOff();
	std::cout << "Ending GearDefaultCmd" << std::endl;
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void GearDefaultCmd::Interrupted() {
	End();
}

