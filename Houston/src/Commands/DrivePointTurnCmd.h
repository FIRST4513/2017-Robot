// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVEPOINTTURNCMD_H
#define DRIVEPOINTTURNCMD_H


#include "Commands/Subsystem.h"
#include "../Robot.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class DrivePointTurnCmd: public Command {
public:
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	DrivePointTurnCmd(double Angle, double Speed, double Timeout, double Mode);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

	virtual void Initialize();
	virtual void Execute();
	virtual bool IsFinished();
	virtual void End();
	virtual void Interrupted();

	float Round(float value, int digits);

private:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLES

    double m_Angle;
    double m_Speed;
    double m_Timeout;
    double m_Mode;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLES

	std::string line;

	std::shared_ptr<NetworkTable> netTable;			// NetTables to talk to RoboRealm
	std::vector<std::string> keys;

	Timer stopTmr;
	int state, turnDir, overShootFlag;
	double startHdg, endHdg, currHdg, tmpHdg, currAngle;
	double tmpDestHdg, tmpCurrHdg, diff;

	double brakePwr = 0.15;
	double brakeTm = 0.15;
	double ltOvershoot = 2;
	double rtOvershoot = 4;
	double tstSpeed;

	//const float kEncoderConvPtTurn =0.3134008;	// degrees rotation per encoder cnt.
	const float kEncoderConvPtTurn = 0.142245; // degrees per encoder
	int LeftEncoderValue;
	int RightEncoderValue;
	const float kFastTurnSpeed = 0.8;
	const float kMedTurnSpeed = 0.5;
	const float kSlowTurnSpeed = 0.2;


	void GetTestData();
	void CheckForDest(double destHdg);
	void CalcDiff(double destHdg);
	void CalcDir(double destHdg);

};

#endif
