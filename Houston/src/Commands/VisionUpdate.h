// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef VISIONUPDATE_H
#define VISIONUPDATE_H


#include "Commands/Subsystem.h"
#include "../Robot.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class VisionUpdate: public Command {
public:
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	VisionUpdate();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

	virtual void Initialize();
	virtual void Execute();
	virtual bool IsFinished();
	virtual void End();
	virtual void Interrupted();





private:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLES


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLES

	std::string line;

	std::shared_ptr<NetworkTable> netTable;			// NetTables to talk to RoboRealm
	std::vector<std::string> keys;

	const double DEGPERPIXLE = 0.1568046;
	const double IMAGECTRX = 94;
	const double IMAGECTRY = 0;
	const float DEGREETORADIANCONST = 0.0174533;	// Degrees * Constant = Radians
	const float RADIANSTODEGREECONST = 57.295791;	// Constant / Radians = Degrees

	const double RADIUSROBOTMIDPT = 14;				// Wheel base ctr to ctr 28"

	const float TgtHt = 9.75;						// Target ht above robot hinge 3" off ground

	double COGX,COGY;
	double lastCOGX, lastCOGY;
	double tgtDistance, tgtAngleX, tgtAngleY;
	double tgtTransCorrection;		// this is the distance in inches tgt is off ctr

	int validTgtFlag;

	double htAngle, tgtDist, angleX, adjAngleX, width, adjWidth, currYaw;
	double tgtAlignError, hdgAngleOffset;
	double tipHdg, tipDist, tipAngle;
	double shiftAngle, shiftDist, maxShiftAngle, maxShiftDist;
	double shiftTotDist, shiftHdg1, shiftHdg2, shiftFwdDist, shiftAngleA, shiftAngleB, shiftDistA, shiftDistB;
	double shiftActiveWheelA, shiftActiveWheelB;				// Direction (-) Left wheel active or (+) Right wheel active
	double tgtDistFromWall = 6;
	double currHdg;
	double ctrLineHdg, ctrLineDist;
	const double pixleConvFactor = 0.17798;


	void GetVisionData();
	void PutVisionData();
	void CalcProbTipHdg(double hdg, double alignError, double tgtCtrDist, double tgtCtrAngleX);
	void CalcShiftData(double tipHdg, double tipDist);
	void CalcMaxShiftData(double tipHdg, double tipDist);
	void LogVisionData();
	// ------------- Conversion Utility Routines ----------------------
	float ConvertInchOffsetAtDistanceToAngle(float dist, float offset);
	float ConvertImageAngleToPixelCnt(float angle, float ctr);
	float ConvertImagePosToAngle(float pos, float ctr);
	float CnvrtDegToRad(float degree);
	float CnvrtRadToDeg(float radian);
	float Round(float value, int digits);
	float AddAngleToHdg(double currHdg, double angle);
	double ConvertHdgToAngle(double hdg);
	double ConvertAngleToHdg(double angle);
	double ConstrainDeg0To360(double deg);
	double ConstrainDeg0To180(double deg);
};

#endif
