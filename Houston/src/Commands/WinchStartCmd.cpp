// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "WinchStartCmd.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

WinchStartCmd::WinchStartCmd(double Speed): Command() {
    m_Speed = Speed;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	pdp = new PowerDistributionPanel();
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void WinchStartCmd::Initialize() {
	Robot::logger->appendLog("Debug, Winch, Starting WinchStartCmd");
	joy = Robot::oi->getPayloadController();
	std::cout << "Winch Start Init" << std::endl;
	Robot::logger->appendLog("Starting To write log file out");
	Robot::logger->printLog();

}

// Called repeatedly when this Command is scheduled to run
void WinchStartCmd::Execute() {
	// check first to see if we have hit the top

	if 	(( joy->GetRawAxis(2) >= 0.5 ) && ( joy->GetRawAxis(3) >= 0.5))
				{
					std::cout << "Running winch" << std::endl;
					Robot::winch->WinchMotorOn(Robot::oi->getPayloadController());
					line = " Winch Motor : Current=" + std::to_string( pdp->GetCurrent(0));
					line += " BatVolt=" + std::to_string(pdp->GetVoltage());
					Robot::logger->appendLog(line);
				}
	else
	{
		Robot::winch->WinchMotorOff();
	}

}

// Make this return true when this Command no longer needs to run execute()
bool WinchStartCmd::IsFinished() {
	if ((Robot::winch->GetWinchLmtSw() == Robot::winch->LIMITSWITCHPRESSED &&  (joy->GetRawButton(7) != true))) return true;

    return false;
}

// Called once after isFinished returns true
void WinchStartCmd::End() {
	Robot::winch->WinchMotorOff();
	Robot::logger->appendLog("Ending Winch Climb .. writing log file out");
	Robot::logger->printLog();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void WinchStartCmd::Interrupted() {
	End();
}
