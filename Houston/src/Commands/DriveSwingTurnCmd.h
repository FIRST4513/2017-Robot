// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVESWINGTURNCMD_H
#define DRIVESWINGTURNCMD_H


#include "Commands/Subsystem.h"
#include "../Robot.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class DriveSwingTurnCmd: public Command {
public:
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	DriveSwingTurnCmd(double LftSpeed, double RtSpeed, double Radius, double Timeout, double Mode, double Angle);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR


	virtual void Initialize();
	virtual void Execute();
	virtual bool IsFinished();
	virtual void End();
	virtual void Interrupted();



private:
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLES

    double m_LftSpeed;
    double m_RtSpeed;
    double m_Radius;
    double m_Timeout;
    double m_Mode;
    double m_Angle;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLES

	PowerDistributionPanel* pdp;

	std::string line;

	//Timer stopTmr;

	int turnDir;	// 0 = straight, -1 = Left Turn, 1 = Right Turn
	int state, overShootFlag;
	double beginHdg, beginYaw, endHdg, currHdg, tmpHdg, currAngle, currYaw, tmpCurrYaw;
	double tmpDestHdg, tmpCurrHdg, diff;
	double activeWheel;
	double hdg1, hdg2, ang1, ang2, shiftD;

	double const TURNSPEED = 0.45;
	double const SLOWSPEED = 0.30;
	double const SLOWANGLE = 4;			// Degrees before reaching target angle to go slow
	double const LFTBRAKEPWR = 0.25;
	double const RTBRAKEPWR = 0.25;
	double const BRAKETM = 0.15;
	double const OVERSHOOT = 1;		// Degrees before destination to start braking
//	double const RTOVERSHOOT = 1;
	double currPwr;

	double tstSpeed, remainAngle;

	//const float kEncoderConvPtTurn =0.3134008;	// degrees rotation per encoder cnt.
	const float kEncoderConvPtTurn = 0.142245; // degrees per encoder
	int LeftEncoderValue;
	int RightEncoderValue;
	const float kFastTurnSpeed = 0.8;
	const float kMedTurnSpeed = 0.5;
	const float kSlowTurnSpeed = 0.2;


	void initMode0();
	void initMode1();
	void initMode2();
	void logModeData();

	void sendPwrOut(double pwr);
	void checkForSlow();
	void checkForBrake();
	bool checkForStopped();
	void CheckForDest(double destHdg);
	double CalcRemainAngle(double currHdg , double destHdg);
	void CalcDir(double destHdg);
	float AddAngleToHdg(double currHdg, double angle);
	double ConvertHdgToAngle(double hdg);
	double ConvertAngleToHdg(double angle);
	double ConstrainDeg0To360(double deg);
	double ConstrainDeg0To180(double deg);
	float Round(float value, int digits);
};

#endif
