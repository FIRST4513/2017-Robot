// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveStraightCmd.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DriveStraightCmd::DriveStraightCmd(double Speed, double Dist, int TO, int Mode): Command() {
    m_Speed = Speed;
    m_Dist = Dist;
    m_TO = TO;
    m_Mode = Mode;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DriveStraightCmd::Initialize() {
	//	AddSequential(new DriveStraightCmd(0.6,42,11,1));	// 0.6=speed, 42=inches, 11=sec T.O, 1=Gyro assist

	line = "Debug, Drivetrain, Starting DriveStraightCmd";
	line += " Speed=" + std::to_string(m_Speed) + " Dist=" + std::to_string(m_Dist);
	line += " TimeOut=" + std::to_string(m_TO) + " Mode=" + std::to_string(m_Mode);
	Robot::logger->appendLog(line);
	std::cout << "DriveStraightCmd Init" << std::endl;

	SetTimeout(m_TO);
	Robot::drivetrain->ResetEncoders();
	Robot::drivetrain->SetFirstTimeFlag(0);				// set flag to zero for gyro correction
	state = 0;
	if (m_Dist < 0) m_Dist = m_Dist * -1;				// Distance is always positive, speed can be negative

}

// Called repeatedly when this Command is scheduled to run
void DriveStraightCmd::Execute() {
	// state 0 = We are moving forward to our target distance
	//		 1 = We have hit our target distance we are applying brakes and need to hold brakes until speed <= 0;
	//		 2 = We have now stopped moving its all over now

	if (state == 0){
		if (m_Mode==0) Robot::drivetrain->TankDrive(m_Speed, m_Speed);
		if (m_Mode==1) Robot::drivetrain->Drive(m_Speed, 0);
	}

	if (state == 0){
		if ((m_Speed >= 0 ) && (Robot::drivetrain->GetAverageDist() >= m_Dist)) state = 1;
		if ((m_Speed < 0 )  && (Robot::drivetrain->GetAverageDist() <= (m_Dist * -1)))	state = 1;
	}

	if (state >= 1) ProcessBrake();
}


// Make this return true when this Command no longer needs to run execute()
bool DriveStraightCmd::IsFinished() {
	if (IsTimedOut()) return true;		// used in all modes
	if (state == 2) return true;		// we have hit our target distance

    return false;
}

// Called once after isFinished returns true
void DriveStraightCmd::End() {
	Robot::drivetrain->StopMtrs();							// stop the motors
	Robot::logger->appendLog("Ending DriveStraightCmd");
	std::cout << "DriveStraightCmd End" << std::endl;
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveStraightCmd::Interrupted() {
	End();
}


void DriveStraightCmd::ProcessBrake(){
	if (state == 1){										// we are in the process of braking
		if (Robot::drivetrain->GetAverageSpeed() > 0){		// we are still moving forward continue braking
			Robot::drivetrain->TankDrive(-0.3, -0.2);		// These are uneven because one side seems to brake harder
		}
		else {												// we have finally stopped
			Robot::drivetrain->StopMtrs();
			state = 2;										// we are stopped
		}
	}
}

