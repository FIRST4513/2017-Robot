// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveReverseCmd.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DriveReverseCmd::DriveReverseCmd(double Dist, double Speed, double Mode, double TO): Command() {
    m_Dist = Dist;
    m_Speed = Speed;
    m_Mode = Mode;
    m_TO = TO;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DriveReverseCmd::Initialize() {
	// Mode not used at this time
	SetTimeout(m_TO);

	line = "Debug, Drivetrain, Starting DriveReverseCmd";
	line += " Dist=" + std::to_string(m_Dist) +  " Speed=" + std::to_string(m_Speed);
	line += " TimeOut=," + std::to_string(m_TO) + " Mode= " + std::to_string(m_Mode);
	Robot::logger->appendLog(line);
	Robot::drivetrain->ResetEncoders();
	std::cout << "Starting DriveReverseCmd"  << std::endl;
	state = 0;
}

// Called repeatedly when this Command is scheduled to run
void DriveReverseCmd::Execute() {
	Robot::drivetrain->TankDrive((m_Speed*1.0),m_Speed);	// **** Boost left reverse ! *****
	if ( Robot::drivetrain->GetAverageSpeed()!= 0) state = 1;	// we are moving
}

// Make this return true when this Command no longer needs to run execute()
bool DriveReverseCmd::IsFinished() {
	if (IsTimedOut()) return true;

	double avgDist =  Robot::drivetrain->GetAverageDist();
	//std::cout << "avgDist = " << avgDist << " m_Dist= " << m_Dist << std::endl;

	if (m_Speed < 0){
		//std::cout << "Speed less than zero checking done "  << std::endl;
		if ((avgDist <= -m_Dist ) && state == 1) return true;
	} else {
		//std::cout << "Speed > than zero checking done"  << std::endl;
		if ((avgDist >= m_Dist ) && state == 1) return true;
	}

    return false;
}

// Called once after isFinished returns true
void DriveReverseCmd::End() {
	Robot::logger->appendLog("Ending DriveReverseCmd");
	Robot::drivetrain->StopMtrs();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveReverseCmd::Interrupted() {
	End();
}
