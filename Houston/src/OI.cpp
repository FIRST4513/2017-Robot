// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/AutoBoilerLeftGearCmdGrp.h"
#include "Commands/AutoBoilerLeftLineCmdGrp.h"
#include "Commands/AutoBoilerRightGearCmdGrp.h"
#include "Commands/AutoBoilerRightLineCmdGrp.h"
#include "Commands/AutoChutesLeftGearCmdGrp.h"
#include "Commands/AutoChutesLeftLineCmdGrp.h"
#include "Commands/AutoChutesRightGearCmdGrp.h"
#include "Commands/AutoChutesRightLineCmdGrp.h"
#include "Commands/AutoCtrGearCmdGrp.h"
#include "Commands/AutoCtrLineCmdGrp.h"
#include "Commands/AutoDoNothingCmdGrp.h"
#include "Commands/AutoDriveFwdCmd.h"
#include "Commands/AutoLeftGearCmdGrp.h"
#include "Commands/AutoLeftLineCmdGrp.h"
#include "Commands/AutoRightGearCmdGrp.h"
#include "Commands/AutoRightLineCmdGrp.h"
#include "Commands/AutonomousCommand.h"
#include "Commands/DelayCmd.h"
#include "Commands/Drive180PtTurnCmd.h"
#include "Commands/DriveByJoystickCmd.h"
#include "Commands/DrivePointTurnCmd.h"
#include "Commands/DriveReverseCmd.h"
#include "Commands/DriveStopCmd.h"
#include "Commands/DriveStraightCmd.h"
#include "Commands/DriveStraightDistCmd.h"
#include "Commands/DriveSwingTurnCmd.h"
#include "Commands/DriveUntlCloseCmd.h"
#include "Commands/FuelDischargeCmd.h"
#include "Commands/FuelShackerCmd.h"
#include "Commands/GearAutoTranCmdGrp.h"
#include "Commands/GearDefaultCmd.h"
#include "Commands/GearEjectBackupCmdGrp.h"
#include "Commands/GearEjectCmd.h"
#include "Commands/GearManualRotateCmd.h"
#include "Commands/GearPushCmd.h"
#include "Commands/GearRetractCmd.h"
#include "Commands/GearRotateAndCtrCmdGrp.h"
#include "Commands/GearTranToPosCmd.h"
#include "Commands/LoggingClearCmd.h"
#include "Commands/LoggingCmd.h"
#include "Commands/LoggingOffCmd.h"
#include "Commands/LoggingOnCmd.h"
#include "Commands/LoggingPrintCmd.h"
#include "Commands/ResetEncodersCmd.h"
#include "Commands/ResetGyro.h"
#include "Commands/SmartdashUpdateCmd.h"
#include "Commands/TestAutoCmdGrp.h"
#include "Commands/TestFwd2Cmd.h"
#include "Commands/TestFwdCmd.h"
#include "Commands/TestPIDCmd.h"
#include "Commands/TestPtTrnCtrCmdGrp.h"
#include "Commands/TestPtTrnLt60CmdGrp.h"
#include "Commands/TestPtTrnRt60CmdGrp.h"
#include "Commands/TestPtTurnCmdGrp.h"
#include "Commands/TestSwTurnCmdGrp.h"
#include "Commands/VisionUpdate.h"
#include "Commands/WinchStartCmd.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    payloadController.reset(new Joystick(1));
    
    startWinchBtn.reset(new JoystickButton(payloadController.get(), 8));
    startWinchBtn->WhileHeld(new WinchStartCmd(0));
    ballDischargeBtn.reset(new JoystickButton(payloadController.get(), 6));
    ballDischargeBtn->WhileHeld(new FuelDischargeCmd());
    gearRotateBtn.reset(new JoystickButton(payloadController.get(), 3));
    gearRotateBtn->WhenPressed(new GearRotateAndCtrCmdGrp());
    plungeBtn.reset(new JoystickButton(payloadController.get(), 4));
    plungeBtn->WhenPressed(new GearPushCmd(0));
    visionAutoAlignBtn.reset(new JoystickButton(payloadController.get(), 1));
    visionAutoAlignBtn->WhenPressed(new TestAutoCmdGrp());
    driverJoystick.reset(new Joystick(0));
    
    autoDriveBtn.reset(new JoystickButton(driverJoystick.get(), 12));
    autoDriveBtn->WhenPressed(new TestAutoCmdGrp());
    ptTurnLtBtn.reset(new JoystickButton(driverJoystick.get(), 5));
    ptTurnLtBtn->WhenPressed(new TestPtTrnLt60CmdGrp());
    ptTurnRtBtn.reset(new JoystickButton(driverJoystick.get(), 6));
    ptTurnRtBtn->WhenPressed(new TestPtTrnRt60CmdGrp());
    ptTurnCtrBtn.reset(new JoystickButton(driverJoystick.get(), 3));
    ptTurnCtrBtn->WhenPressed(new TestPtTrnCtrCmdGrp());
    driveByJoystickBtn.reset(new JoystickButton(driverJoystick.get(), 1));
    driveByJoystickBtn->WhileHeld(new DriveByJoystickCmd());

    // SmartDashboard Buttons
    SmartDashboard::PutData("TestAutoCmdGrp", new TestAutoCmdGrp());
    SmartDashboard::PutData("VisionUpdate", new VisionUpdate());
    SmartDashboard::PutData("TestFwdCmd", new TestFwdCmd());
    SmartDashboard::PutData("TestPtTurnCmdGrp", new TestPtTurnCmdGrp());
    SmartDashboard::PutData("ResetGyro", new ResetGyro());
    SmartDashboard::PutData("LoggingOffCmd", new LoggingOffCmd());
    SmartDashboard::PutData("LoggingOnCmd", new LoggingOnCmd());
    SmartDashboard::PutData("LoggingPrintCmd", new LoggingPrintCmd());
    SmartDashboard::PutData("LoggingClearCmd", new LoggingClearCmd());
    SmartDashboard::PutData("GearRetractCmd", new GearRetractCmd());
    SmartDashboard::PutData("GearManualRotateCmd", new GearManualRotateCmd());
    SmartDashboard::PutData("GearEjectCmd", new GearEjectCmd());
    SmartDashboard::PutData("DriveStraightDistCmd: default", new DriveStraightDistCmd(0, 0, 0, 0));
    SmartDashboard::PutData("DrivePointTurnCmd: default", new DrivePointTurnCmd(0, 0, 0, 0));

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getDriverJoystick() {
   return driverJoystick;
}

std::shared_ptr<Joystick> OI::getPayloadController() {
   return payloadController;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
