// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::drivetrainFrontLeftSpdCtr;
std::shared_ptr<SpeedController> RobotMap::drivetrainFrontRightSpdCtr;
std::shared_ptr<SpeedController> RobotMap::drivetrainRearLeftSpdCtr;
std::shared_ptr<SpeedController> RobotMap::drivetrainRearRightSpdCtr;
std::shared_ptr<RobotDrive> RobotMap::drivetrainRobotDrive41;
std::shared_ptr<Encoder> RobotMap::drivetrainLeftDriveEncoder;
std::shared_ptr<Encoder> RobotMap::drivetrainRightDriveEncoder;
std::shared_ptr<AnalogInput> RobotMap::drivetrainIrProxLeft;
std::shared_ptr<AnalogInput> RobotMap::drivetrainIrProxRight;
std::shared_ptr<AnalogInput> RobotMap::drivetrainSonar;
std::shared_ptr<DigitalInput> RobotMap::drivetrainProbeLmtSw;
std::shared_ptr<SpeedController> RobotMap::fuelHandlerFuelCollSpdCtrl;
std::shared_ptr<SpeedController> RobotMap::fuelHandlerFuelDisSpdCtrl;
std::shared_ptr<SpeedController> RobotMap::fuelHandlerFuelShakerSpdCtrl;
std::shared_ptr<Encoder> RobotMap::fuelHandlerFuelDisEnc;
std::shared_ptr<DigitalInput> RobotMap::winchWinchLmtSw;
std::shared_ptr<SpeedController> RobotMap::winchWinchSpdCtr;
std::shared_ptr<Relay> RobotMap::gearHandlerGearEjectSpike;
std::shared_ptr<Relay> RobotMap::gearHandlerGearRotSpike;
std::shared_ptr<DigitalInput> RobotMap::gearHandlerGearEjectFwdLmtSw;
std::shared_ptr<DigitalInput> RobotMap::gearHandlerGearEjectRearLmtSw;
std::shared_ptr<AnalogPotentiometer> RobotMap::gearHandlerGearTransPot;
std::shared_ptr<DigitalInput> RobotMap::gearHandlerGearTransLeftLmtSw;
std::shared_ptr<DigitalInput> RobotMap::gearHandlerGearRotateSnsr;
std::shared_ptr<DigitalInput> RobotMap::gearHandlerGearTransRightLmtSw;
std::shared_ptr<DigitalInput> RobotMap::gearHandlerGearLoadedSnsr;
std::shared_ptr<SpeedController> RobotMap::gearHandlerGearTransSpdCtrl;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    drivetrainFrontLeftSpdCtr.reset(new Talon(8));
    lw->AddActuator("Drivetrain", "FrontLeftSpdCtr", std::static_pointer_cast<Talon>(drivetrainFrontLeftSpdCtr));
    
    drivetrainFrontRightSpdCtr.reset(new Talon(6));
    lw->AddActuator("Drivetrain", "FrontRightSpdCtr", std::static_pointer_cast<Talon>(drivetrainFrontRightSpdCtr));
    
    drivetrainRearLeftSpdCtr.reset(new Talon(9));
    lw->AddActuator("Drivetrain", "RearLeftSpdCtr", std::static_pointer_cast<Talon>(drivetrainRearLeftSpdCtr));
    
    drivetrainRearRightSpdCtr.reset(new Talon(7));
    lw->AddActuator("Drivetrain", "RearRightSpdCtr", std::static_pointer_cast<Talon>(drivetrainRearRightSpdCtr));
    
    drivetrainRobotDrive41.reset(new RobotDrive(drivetrainFrontLeftSpdCtr, drivetrainRearLeftSpdCtr,
              drivetrainFrontRightSpdCtr, drivetrainRearRightSpdCtr));
    
    drivetrainRobotDrive41->SetSafetyEnabled(true);
        drivetrainRobotDrive41->SetExpiration(0.1);
        drivetrainRobotDrive41->SetSensitivity(0.5);
        drivetrainRobotDrive41->SetMaxOutput(1.0);

    drivetrainLeftDriveEncoder.reset(new Encoder(2, 3, true, Encoder::k4X));
    lw->AddSensor("Drivetrain", "LeftDriveEncoder", drivetrainLeftDriveEncoder);
    drivetrainLeftDriveEncoder->SetDistancePerPulse(1.0);
    drivetrainLeftDriveEncoder->SetPIDSourceType(PIDSourceType::kRate);
    drivetrainRightDriveEncoder.reset(new Encoder(4, 5, false, Encoder::k4X));
    lw->AddSensor("Drivetrain", "RightDriveEncoder", drivetrainRightDriveEncoder);
    drivetrainRightDriveEncoder->SetDistancePerPulse(1.0);
    drivetrainRightDriveEncoder->SetPIDSourceType(PIDSourceType::kRate);
    drivetrainIrProxLeft.reset(new AnalogInput(0));
    lw->AddSensor("Drivetrain", "IrProxLeft", drivetrainIrProxLeft);
    
    drivetrainIrProxRight.reset(new AnalogInput(1));
    lw->AddSensor("Drivetrain", "IrProxRight", drivetrainIrProxRight);
    
    drivetrainSonar.reset(new AnalogInput(2));
    lw->AddSensor("Drivetrain", "Sonar", drivetrainSonar);
    
    drivetrainProbeLmtSw.reset(new DigitalInput(12));
    lw->AddSensor("Drivetrain", "ProbeLmtSw", drivetrainProbeLmtSw);
    
    fuelHandlerFuelCollSpdCtrl.reset(new Talon(0));
    lw->AddActuator("FuelHandler", "FuelCollSpdCtrl", std::static_pointer_cast<Talon>(fuelHandlerFuelCollSpdCtrl));
    
    fuelHandlerFuelDisSpdCtrl.reset(new Talon(1));
    lw->AddActuator("FuelHandler", "FuelDisSpdCtrl", std::static_pointer_cast<Talon>(fuelHandlerFuelDisSpdCtrl));
    
    fuelHandlerFuelShakerSpdCtrl.reset(new Talon(12));
    lw->AddActuator("FuelHandler", "FuelShakerSpdCtrl", std::static_pointer_cast<Talon>(fuelHandlerFuelShakerSpdCtrl));
    
    fuelHandlerFuelDisEnc.reset(new Encoder(13, 14, false, Encoder::k1X));
    lw->AddSensor("FuelHandler", "FuelDisEnc", fuelHandlerFuelDisEnc);
    fuelHandlerFuelDisEnc->SetDistancePerPulse(1.0);
    fuelHandlerFuelDisEnc->SetPIDSourceType(PIDSourceType::kRate);
    winchWinchLmtSw.reset(new DigitalInput(7));
    lw->AddSensor("Winch", "WinchLmtSw", winchWinchLmtSw);
    
    winchWinchSpdCtr.reset(new Spark(2));
    lw->AddActuator("Winch", "WinchSpdCtr", std::static_pointer_cast<Spark>(winchWinchSpdCtr));
    
    gearHandlerGearEjectSpike.reset(new Relay(3));
    lw->AddActuator("GearHandler", "GearEjectSpike", gearHandlerGearEjectSpike);
    
    gearHandlerGearRotSpike.reset(new Relay(1));
    lw->AddActuator("GearHandler", "GearRotSpike", gearHandlerGearRotSpike);
    
    gearHandlerGearEjectFwdLmtSw.reset(new DigitalInput(10));
    lw->AddSensor("GearHandler", "GearEjectFwdLmtSw", gearHandlerGearEjectFwdLmtSw);
    
    gearHandlerGearEjectRearLmtSw.reset(new DigitalInput(11));
    lw->AddSensor("GearHandler", "GearEjectRearLmtSw", gearHandlerGearEjectRearLmtSw);
    
    gearHandlerGearTransPot.reset(new AnalogPotentiometer(3, 1.0, 0.0));
    lw->AddSensor("GearHandler", "GearTransPot", gearHandlerGearTransPot);
    
    gearHandlerGearTransLeftLmtSw.reset(new DigitalInput(9));
    lw->AddSensor("GearHandler", "GearTransLeftLmtSw", gearHandlerGearTransLeftLmtSw);
    
    gearHandlerGearRotateSnsr.reset(new DigitalInput(1));
    lw->AddSensor("GearHandler", "GearRotateSnsr", gearHandlerGearRotateSnsr);
    
    gearHandlerGearTransRightLmtSw.reset(new DigitalInput(8));
    lw->AddSensor("GearHandler", "GearTransRightLmtSw", gearHandlerGearTransRightLmtSw);
    
    gearHandlerGearLoadedSnsr.reset(new DigitalInput(0));
    lw->AddSensor("GearHandler", "GearLoadedSnsr", gearHandlerGearLoadedSnsr);
    
    gearHandlerGearTransSpdCtrl.reset(new Talon(5));
    lw->AddActuator("GearHandler", "GearTransSpdCtrl", std::static_pointer_cast<Talon>(gearHandlerGearTransSpdCtrl));
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
