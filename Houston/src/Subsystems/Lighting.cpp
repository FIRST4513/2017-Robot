// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Lighting.h"
#include "../RobotMap.h"
#include "WPILib.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Lighting::Lighting() : Subsystem("Lighting") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    m_RedLedMode=0;
    m_BlueLedMode=0;
}

void Lighting::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void  Lighting::SetBlueLed(double Mode)		// Mode 0=off, 1=on
{
	if (Mode != 0){
		//ledBlueSpike->Set(ledBlueSpike->kForward);	// Turn On Led
		m_BlueLedMode = 1;							// Store current status
	}
	else{
		//ledBlueSpike->Set(ledBlueSpike->kOff);		// Turn Of Led
		m_BlueLedMode = 0;							// Store current status
	}
}

void Lighting::SetRedLed(double Mode)				// Mode 0=off, 1=on
{
	if (Mode != 0){
		//ledRedSpike->Set(ledRedSpike->kForward);	// Turn On Led
		m_RedLedMode = 1;							// Store current status
	}
	else{
		//ledRedSpike->Set(ledRedSpike->kOff);		// Turn Of Led
		m_RedLedMode = 0;							// Store current status
	}
}

// --------------------------------------------------------------------

double Lighting::GetRedLedVaule()  { return m_RedLedMode; }
double Lighting::GetBlueLedVaule() { return m_BlueLedMode; }

// --------------------------------------------------------------------
void Lighting::Update_Smartdashboard(double mode){
	if (m_BlueLedMode == 0){
		SmartDashboard::PutNumber("Encoder Right Cnt", 3.0);
		SmartDashboard::PutString("Blue Led", "Off");
	}
	else{
		SmartDashboard::PutString("Blue Led", "ON");
	}
	if (m_RedLedMode == 0){
		SmartDashboard::PutString("Red Led", "Off");
	}
	else{
		SmartDashboard::PutString("Red Led", "ON");
	}
}
