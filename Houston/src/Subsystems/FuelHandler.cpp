// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "FuelHandler.h"
#include "../RobotMap.h"
#include "../Robot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

FuelHandler::FuelHandler() : Subsystem("FuelHandler") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    fuelCollSpdCtrl = RobotMap::fuelHandlerFuelCollSpdCtrl;
    fuelDisSpdCtrl = RobotMap::fuelHandlerFuelDisSpdCtrl;
    fuelShakerSpdCtrl = RobotMap::fuelHandlerFuelShakerSpdCtrl;
    fuelDisEnc = RobotMap::fuelHandlerFuelDisEnc;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void FuelHandler::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void FuelHandler::SetShooterSpeed(double speed){
	fuelDisSpdCtrl->Set(speed);
}

void FuelHandler::StopShooter(){
	fuelDisSpdCtrl->StopMotor();
}

double FuelHandler::GetShooterRPM(){
	double rate = fuelDisEnc->GetPeriod();	// period equals time in seconds between each pulse

	if (rate == 0)
		return 0;
	else
		return ( 60 / (rate * 20));			// 20 cnts/rev 60sec/mim
}

double FuelHandler::GetShooterCnt(){
	return fuelDisEnc->Get();
}

void FuelHandler::UpdateSmartDashboard(){
	SmartDashboard::PutNumber("Shooter RPM", GetShooterRPM());
	SmartDashboard::PutNumber("Shooter Cnt", GetShooterCnt());
}


